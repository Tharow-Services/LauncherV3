; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define AppName "Tantalum Launcher"
#define AppVersion "5.1-230+"
#define AppVersionName "Tantalum 5.1-230+"
#define AppContact "Tharow Services Support"
#define AppPublisher "Tharow Services"
#define AppPublisherURL "https://tharow.net/"
#define AppSupportURL "https://github.com/Tharow-Services/Tantalum-Launcher/issues"
#define AppUpdatesURL "https://github.com/Tharow-Services/Tantalum-Launcher/releases"
#define AppCopyright "Copyright (C) 2022 Tharow Services"
#define AppComments "The Windows Installer for the Tantalum Launcher"
;#define AppPassword "tantalum"
;#define AppEncrypt "no" 
;#define PojectDirectory "C:\Users\TherayTharow\IdeaProjects\Tantalum-Launcher"
;#define LauncherFile "target\launcher.exe"
;#define SettingsFile "src\inno\settings.json" 

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
SourceDir={#ProjectDirectory}
AppId={{8D36A831-A273-4B9D-9F59-08962A70A19C}
AppName={#AppName}
AppVersion={#AppVersion}
AppVerName={#AppVersionName}
AppPublisher={#AppPublisher}
AppPublisherURL={#AppPublisherURL}
AppReadmeFile="https://github.com/Tharow-Services/Tantalum-Launcher/blob/master/README.md"
AppSupportURL={#AppSupportURL}
AppUpdatesURL={#AppUpdatesURL}
AppCopyright={#AppCopyright}
AppContact={#AppContact}
AppComments={#AppComments}
DefaultDirName={userappdata}\.tantalum
DefaultGroupName={#AppName}
AllowNoIcons=yes
InfoBeforeFile=LICENSE.txt
LicenseFile=LICENSE
; Remove the following line to run in administrative install mode (install for all users.)
PrivilegesRequired=lowest
;PrivilegesRequiredOverridesAllowed=dialog
OutputDir=target
OutputBaseFilename=tantalum-setup
SetupIconFile=src\main\resources\icon.ico
;UninstallIconFile={#ProjectDirectory}\src\main\resources\icon.ico
UninstallDisplayIcon={app}\TantalumLauncher.exe,0

Password={#AppPassword}
Encryption={#AppEncrypt}
Compression=lzma
SolidCompression=yes
WizardStyle=modern


[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "{#LauncherFile}";DestDir: "{app}"; DestName: "TantalumLauncher.exe"; Flags: ignoreversion
Source: "{#SettingsFile}"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files
Source: "{tmp}\jre.zip"; DestDir: "{app}"; Flags: deleteafterinstall external
[Icons]
Name: "{group}\{#AppName}"; Filename: "{app}\TantalumLauncher.exe";
Name: "{autodesktop}\{#AppName}"; Filename: "{app}\TantalumLauncher.exe";
Name: "{group}\{cm:UninstallProgram,{#AppName}}"; Filename: "{uninstallexe}"

[Run]
Filename: "{sys}\tar.exe"; Parameters: "-xf .\jre.zip"; WorkingDir: "{app}"; StatusMsg: "Installing Java Runtime"; Flags: runhidden
Filename: "{sys}\cmd.exe"; Parameters: "/c  setx PATH %PATH%;{userappdata}\.tantalum"; WorkingDir: "{app}"; StatusMsg: "Seting up Tantalum Path"; Flags: runhidden
[UninstallDelete]
Type: filesandordirs; Name: "{app}"

[Code]
var
  DownloadPage: TDownloadWizardPage;

function OnDownloadProgress(const Url, FileName: String; const Progress, ProgressMax: Int64): Boolean;
begin
  if Progress = ProgressMax then
    Log(Format('Successfully downloaded file to {tmp}: %s', [FileName]));
  Result := True;
end;

procedure InitializeWizard;
begin
  DownloadPage := CreateDownloadPage(SetupMessage(msgWizardPreparing), SetupMessage(msgPreparingDesc), @OnDownloadProgress);
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  if CurPageID = wpReady then begin
    DownloadPage.Clear;
    DownloadPage.Add('https://corretto.aws/downloads/latest/amazon-corretto-8-x64-windows-jre.zip', 'jre.zip', '');
    DownloadPage.Show;
    try
      try
        DownloadPage.Download; // This downloads the files to {tmp}
        Result := True;
      except
        if DownloadPage.AbortedByUser then
          Log('Aborted by user.')
        else
          SuppressibleMsgBox(AddPeriod(GetExceptionMessage), mbCriticalError, MB_OK, IDOK);
        Result := False;
      end;
    finally
      DownloadPage.Hide;
    end;
  end else
    Result := True;
end;
